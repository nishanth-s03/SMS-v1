<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
        integrity="sha512-xYIw+Ag2Zpt5Y0rSPzVpI/t5mySd3vxMEOt8tSi6c7OHDUdtz/LZAlZR3z9ACgDeqy8x5EjllgU8d2l/eyv1Wg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r121/three.min.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

        html,
        body {
            margin: 0;
            height: 100%;
            overflow: hidden;
            font-family: 'Roboto' !important;
            color: white;
            font-size: 9px;
        }

        #magic {
            position: fixed;
            width: 100%;
            height: 100vh;
            display: block;
            top: 0;
            left: 0;
            z-index: -9999;
        }

        .playground {

            position: fixed;
            width: 100%;
            height: 100vh;
            display: block;
            top: 0;
            left: 0;
            display: flex;
            flex-wrap: nowrap;
            flex-direction: column;
            justify-content: flex-end;
            align-items: center;

        }

        .bottomPosition {

            text-align: center;
            margin-bottom: 50px;

        }

        .minText {

            font-size: 14px;
        }

        a {
            color: white;
            font-size: 12px;
            text-decoration: none;
        }

        .logo {
            width: 50px;
            height: 50px;
        }
    </style>

    <style>
        /* body {
            font-family: "Dosis", sans-serif;
            text-align: center;
        } */

        #menu {
            width: 160px;
            height: 160px;
            position: absolute;
            left: 50%;
            top: 80%;
            margin: -75px 0 0 -75px;
            list-style: none;
            font-size: 200%;
        }

        .menu-button {
            opacity: 0;
            z-index: -1;
        }

        .menu-button {
            width: 100px;
            height: 100px;
            position: absolute;
            left: 50%;
            top: 80%;
            margin: -75px 0 0 -75px;
            border-radius: 50%;
            background: #040114;
            /* background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='10' fill='currentColor' class='bi bi-share-fill' viewBox='0 0 16 16'><path d='M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5'/></svg>"); */
            background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='blue' class='bi bi-share-fill' viewBox='0 0 16 16'><path d='M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5'/></svg>");
            background-position: center;
            background-repeat: no-repeat;
            background-size: 50%;
            overflow: hidden;
            text-decoration: none;
            overflow: hidden;
            text-decoration: none;
        }

        #menu:not(:target)>a:first-of-type,
        #menu:target>a:last-of-type {
            opacity: 1;
            z-index: 1;
        }

        #menu:not(:target)>.icon-plus:before,
        #menu:target>.icon-minus:before {
            opacity: 1;
        }

        .menu-item {
            width: 40px;
            height: 40px;
            position: absolute;
            left: 55%;
            line-height: 5px;
            top: 70%;
            margin: -50px 0 0 -50px;
            border-radius: 50%;
            background-color: #1c0202;
            transform: translate(0px, 0px);
            transition: transform 500ms;
            /* z-index: -2; */
            transition: .5s;
        }

        .menu-item:hover {
            opacity: 0.5;
            box-shadow: 0 5px 10px black;
        }


        .menu-item a {
            color: #d1ee8a;
            position: relative;
            top: 30%;
            left: 0;
            text-decoration: none;
        }

        #menu:target>.menu-item:nth-child(6) {
            transform: rotate(60deg) translateY(-150px) rotate(300deg);
            transition-delay: 0s;
        }

        #menu:target>.menu-item:nth-child(5) {
            transform: rotate(20deg) translateY(-155px) rotate(-20deg);
            transition-delay: 0.1s;
        }

        #menu:target>.menu-item:nth-child(3) {
            transform: rotate(-20deg) translateY(-155px) rotate(20deg);
            transition-delay: 0.2s;
        }

        #menu:target>.menu-item:nth-child(4) {
            transform: rotate(-60deg) translateY(-150px) rotate(60deg);
            transition-delay: 0.3s;
        }

        /* 
        #menu:target>.menu-item:nth-child(7) {
            transform: rotate(-90deg) translateY(-150px) rotate(90deg);
            transition-delay: 0.4s;
        } */

        .content {
            position: absolute;
            text-align: center;
            margin: -10px 0 0 -30px;
            top: 90%;
            left: 50%;
            font-size: 20px;
        }
    </style>

    <style>
        html,
        body {
            height: 100%;
        }

        body {
            margin: 0;
            background-color: #292929;
            overflow: hidden;
        }

        nav {
            position: absolute;
            top: 10%;
            right: 0;
            left: 0;
            width: 319px;
            display: table;
            margin: 0 auto;
            transform: translateY(-50%);
        }

        nav a {
            position: relative;
            width: 33.333%;
            display: table-cell;
            text-align: center;
            color: #949494;
            text-decoration: none;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            font-weight: bold;
            padding: 10px 20px;
            transition: 0.2s ease color;
            font-size: large;
        }

        nav a:before,
        nav a:after {
            content: "";
            position: absolute;
            border-radius: 50%;
            transform: scale(0);
            transition: 0.2s ease transform;
        }

        nav a:before {
            top: 0;
            left: 10px;
            width: 6px;
            height: 6px;
        }

        nav a:after {
            top: 5px;
            left: 18px;
            width: 4px;
            height: 4px;
        }

        nav a:nth-child(1):before {
            background-color: yellow;
        }

        nav a:nth-child(1):after {
            background-color: red;
        }

        nav a:nth-child(2):before {
            background-color: #00e2ff;
        }

        nav a:nth-child(2):after {
            background-color: #89ff00;
        }

        nav a:nth-child(3):before {
            background-color: purple;
        }

        nav a:nth-child(3):after {
            background-color: palevioletred;
        }

        nav a:nth-child(4):before {
            background-color: rgb(72, 228, 37);
        }

        nav a:nth-child(4):after {
            background-color: rgb(62, 62, 157);
        }

        nav a:nth-child(5):before {
            background-color: rgb(163, 189, 232);
        }

        nav a:nth-child(5):after {
            background-color: rgb(177, 240, 18);
        }

        #indicator {
            position: absolute;
            left: 5%;
            bottom: 0;
            width: 30px;
            height: 3px;
            background-color: #fff;
            border-radius: 5px;
            transition: 0.2s ease left;
        }

        nav a:hover {
            color: #fff;
        }

        nav a:hover:before,
        nav a:hover:after {
            transform: scale(1);
        }

        nav a:nth-child(1):hover~#indicator {
            background: linear-gradient(130deg, yellow, red);
        }

        nav a:nth-child(2):hover~#indicator {
            left: 25%;
            background: linear-gradient(130deg, #00e2ff, #89ff00);
        }

        nav a:nth-child(3):hover~#indicator {
            left: 45%;
            background: linear-gradient(130deg, purple, palevioletred);
        }

        nav a:nth-child(4):hover~#indicator {
            left: 65%;
            background: linear-gradient(130deg, rgb(70, 211, 27), palevioletred);
        }

        nav a:nth-child(5):hover~#indicator {
            left: 85%;
            background: linear-gradient(130deg, rgb(62, 215, 179), palevioletred);
        }
    </style>

</head>

<body>

    <div id="magic"></div>


    <nav>
        <a href="/home">HOME</a>
        <a href="/dummy_dashboard">ADMIN</a>
        <a href="/stu_login">STUDENT</a>
        <a href="/staff_login">STAFF</a>
        <a href="/logout">LOGOUT</a>
        <div id="indicator"></div>
    </nav>



    <div class="container">
        <ul id="menu">

            <!-- open-menu id for click event -->
            <a class="menu-button icon-plus" id="open-menu" href="#menu" title="Show navigation"></a>
            <a class="menu-button icon-minus" href="#0" title="Hide navigation"></a>

            <li class="menu-item">
                <a
                    href="https://www.facebook.com/pages/St.%20Joseph%20Engineering%20College,%20Vamanjoor,%20mangalore/128642943843869/">
                    <span class="fa fa-github">
                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                            class="bi bi-facebook" viewBox="0 0 16 16">
                            <path
                                d="M16 8.049c0-4.446-3.582-8.05-8-8.05C3.58 0-.002 3.603-.002 8.05c0 4.017 2.926 7.347 6.75 7.951v-5.625h-2.03V8.05H6.75V6.275c0-2.017 1.195-3.131 3.022-3.131.876 0 1.791.157 1.791.157v1.98h-1.009c-.993 0-1.303.621-1.303 1.258v1.51h2.218l-.354 2.326H9.25V16c3.824-.604 6.75-3.934 6.75-7.951" />
                        </svg>
                    </span>
                </a>
            </li>

            <li class="menu-item">
                <a href="https://www.linkedin.com/">
                    <span class="fa fa-linkedin"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25"
                            fill="currentColor" class="bi bi-linkedin" viewBox="0 0 16 16">
                            <path
                                d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401m-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4" />
                        </svg></span>
                </a>
            </li>


            <li class="menu-item">
                <a href="https://sjec.ac.in/">
                    <!-- <span class="fa fa-instagram"> -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                        class="bi bi-instagram" viewBox="0 0 16 16">
                        <path
                            d="M8 0C5.829 0 5.556.01 4.703.048 3.85.088 3.269.222 2.76.42a3.917 3.917 0 0 0-1.417.923A3.927 3.927 0 0 0 .42 2.76C.222 3.268.087 3.85.048 4.7.01 5.555 0 5.827 0 8.001c0 2.172.01 2.444.048 3.297.04.852.174 1.433.372 1.942.205.526.478.972.923 1.417.444.445.89.719 1.416.923.51.198 1.09.333 1.942.372C5.555 15.99 5.827 16 8 16s2.444-.01 3.298-.048c.851-.04 1.434-.174 1.943-.372a3.916 3.916 0 0 0 1.416-.923c.445-.445.718-.891.923-1.417.197-.509.332-1.09.372-1.942C15.99 10.445 16 10.173 16 8s-.01-2.445-.048-3.299c-.04-.851-.175-1.433-.372-1.941a3.926 3.926 0 0 0-.923-1.417A3.911 3.911 0 0 0 13.24.42c-.51-.198-1.092-.333-1.943-.372C10.443.01 10.172 0 7.998 0h.003zm-.717 1.442h.718c2.136 0 2.389.007 3.232.046.78.035 1.204.166 1.486.275.373.145.64.319.92.599.28.28.453.546.598.92.11.281.24.705.275 1.485.039.843.047 1.096.047 3.231s-.008 2.389-.047 3.232c-.035.78-.166 1.203-.275 1.485a2.47 2.47 0 0 1-.599.919c-.28.28-.546.453-.92.598-.28.11-.704.24-1.485.276-.843.038-1.096.047-3.232.047s-2.39-.009-3.233-.047c-.78-.036-1.203-.166-1.485-.276a2.478 2.478 0 0 1-.92-.598 2.48 2.48 0 0 1-.6-.92c-.109-.281-.24-.705-.275-1.485-.038-.843-.046-1.096-.046-3.233 0-2.136.008-2.388.046-3.231.036-.78.166-1.204.276-1.486.145-.373.319-.64.599-.92.28-.28.546-.453.92-.598.282-.11.705-.24 1.485-.276.738-.034 1.024-.044 2.515-.045v.002zm4.988 1.328a.96.96 0 1 0 0 1.92.96.96 0 0 0 0-1.92zm-4.27 1.122a4.109 4.109 0 1 0 0 8.217 4.109 4.109 0 0 0 0-8.217zm0 1.441a2.667 2.667 0 1 1 0 5.334 2.667 2.667 0 0 1 0-5.334" />
                    </svg>
                    <!-- </span> -->
                </a>
            </li>

            <li class="menu-item">
                <a href="https://twitter.com/i/flow/login?redirect_after_login=%2FSJEC_Mangaluru">
                    <span class="fa fa-twitter"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25"
                            fill="currentColor" class="bi bi-twitter-x" viewBox="0 0 16 16">
                            <path
                                d="M12.6.75h2.454l-5.36 6.142L16 15.25h-4.937l-3.867-5.07-4.425 5.07H.316l5.733-6.57L0 .75h5.063l3.495 4.633L12.601.75Zm-.86 13.028h1.36L4.323 2.145H2.865l8.875 11.633Z" />
                        </svg></span>
                </a>
            </li>

            <!-- <li class="menu-item">
                <a href="https://www.linkedin.com/">
                    <span class="fa fa-linkedin"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25"
                            fill="currentColor" class="bi bi-linkedin" viewBox="0 0 16 16">
                            <path
                                d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401m-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4" />
                        </svg></span>
                </a>
            </li> -->

        </ul>
    </div>


    <script type="x-shader/x-vertex" id="vertexshader">

        attribute float size;
        attribute vec3 customColor;
        varying vec3 vColor;
      
        void main() {
      
          vColor = customColor;
          vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
          gl_PointSize = size * ( 300.0 / -mvPosition.z );
          gl_Position = projectionMatrix * mvPosition;
      
        }
      
      </script>

    <script type="x-shader/x-fragment" id="fragmentshader">

        uniform vec3 color;
       uniform sampler2D pointTexture;
      
       varying vec3 vColor;
      
       void main() {
      
         gl_FragColor = vec4( color * vColor, 1.0 );    
         gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );
      
       }
      </script>

    <script>
        const preload = () => {

            let manager = new THREE.LoadingManager();
            manager.onLoad = function () {
                const environment = new Environment(typo, particle);
            }

            var typo = null;
            const loader = new THREE.FontLoader(manager);
            const font = loader.load('https://res.cloudinary.com/dydre7amr/raw/upload/v1612950355/font_zsd4dr.json', function (font) { typo = font; });
            const particle = new THREE.TextureLoader(manager).load('https://res.cloudinary.com/dfvtkoboz/image/upload/v1605013866/particle_a64uzf.png');

        }

        if (document.readyState === "complete" || (document.readyState !== "loading" && !document.documentElement.doScroll))
            preload();
        else
            document.addEventListener("DOMContentLoaded", preload);

        class Environment {

            constructor(font, particle) {

                this.font = font;
                this.particle = particle;
                this.container = document.querySelector('#magic');
                this.scene = new THREE.Scene();
                this.createCamera();
                this.createRenderer();
                this.setup()
                this.bindEvents();
            }

            bindEvents() {

                window.addEventListener('resize', this.onWindowResize.bind(this));

            }

            setup() {

                this.createParticles = new CreateParticles(this.scene, this.font, this.particle, this.camera, this.renderer);
            }

            render() {

                this.createParticles.render()
                this.renderer.render(this.scene, this.camera)
            }

            createCamera() {

                this.camera = new THREE.PerspectiveCamera(65, this.container.clientWidth / this.container.clientHeight, 1, 10000);
                this.camera.position.set(0, 0, 100);

            }

            createRenderer() {

                this.renderer = new THREE.WebGLRenderer();
                this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);

                this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

                this.renderer.outputEncoding = THREE.sRGBEncoding;
                this.container.appendChild(this.renderer.domElement);

                this.renderer.setAnimationLoop(() => { this.render() })

            }

            onWindowResize() {

                this.camera.aspect = this.container.clientWidth / this.container.clientHeight;
                this.camera.updateProjectionMatrix();
                this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);

            }
        }

        class CreateParticles {

            constructor(scene, font, particleImg, camera, renderer) {

                this.scene = scene;
                this.font = font;
                this.particleImg = particleImg;
                this.camera = camera;
                this.renderer = renderer;

                this.raycaster = new THREE.Raycaster();
                this.mouse = new THREE.Vector2(-200, 200);

                this.colorChange = new THREE.Color();

                this.buttom = false;

                this.data = {

                    text: 'School Managment\n System',
                    amount: 1500,
                    particleSize: 1,
                    particleColor: 0xffffff,
                    textSize: 10,
                    area: 250,
                    ease: .05,
                }

                this.setup();
                this.bindEvents();

            }


            setup() {

                const geometry = new THREE.PlaneGeometry(this.visibleWidthAtZDepth(100, this.camera), this.visibleHeightAtZDepth(100, this.camera));
                const material = new THREE.MeshBasicMaterial({ color: 0x00ff00, transparent: true });
                this.planeArea = new THREE.Mesh(geometry, material);
                this.planeArea.visible = false;
                this.createText();

            }

            bindEvents() {

                document.addEventListener('mousedown', this.onMouseDown.bind(this));
                document.addEventListener('mousemove', this.onMouseMove.bind(this));
                document.addEventListener('mouseup', this.onMouseUp.bind(this));

            }

            onMouseDown() {

                this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
                this.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;

                const vector = new THREE.Vector3(this.mouse.x, this.mouse.y, 0.5);
                vector.unproject(this.camera);
                const dir = vector.sub(this.camera.position).normalize();
                const distance = - this.camera.position.z / dir.z;
                this.currenPosition = this.camera.position.clone().add(dir.multiplyScalar(distance));

                const pos = this.particles.geometry.attributes.position;
                this.buttom = true;
                this.data.ease = .01;

            }

            onMouseUp() {

                this.buttom = false;
                this.data.ease = .05;
            }

            onMouseMove() {

                this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
                this.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;

            }

            render(level) {

                const time = ((.001 * performance.now()) % 12) / 12;
                const zigzagTime = (1 + (Math.sin(time * 2 * Math.PI))) / 6;

                this.raycaster.setFromCamera(this.mouse, this.camera);

                const intersects = this.raycaster.intersectObject(this.planeArea);

                if (intersects.length > 0) {

                    const pos = this.particles.geometry.attributes.position;
                    const copy = this.geometryCopy.attributes.position;
                    const coulors = this.particles.geometry.attributes.customColor;
                    const size = this.particles.geometry.attributes.size;

                    const mx = intersects[0].point.x;
                    const my = intersects[0].point.y;
                    const mz = intersects[0].point.z;

                    for (var i = 0, l = pos.count; i < l; i++) {

                        const initX = copy.getX(i);
                        const initY = copy.getY(i);
                        const initZ = copy.getZ(i);

                        let px = pos.getX(i);
                        let py = pos.getY(i);
                        let pz = pos.getZ(i);

                        this.colorChange.setHSL(.5, 1, 1)
                        coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b)
                        coulors.needsUpdate = true;

                        size.array[i] = this.data.particleSize;
                        size.needsUpdate = true;

                        let dx = mx - px;
                        let dy = my - py;
                        const dz = mz - pz;

                        const mouseDistance = this.distance(mx, my, px, py)
                        let d = (dx = mx - px) * dx + (dy = my - py) * dy;
                        const f = - this.data.area / d;

                        if (this.buttom) {

                            const t = Math.atan2(dy, dx);
                            px -= f * Math.cos(t);
                            py -= f * Math.sin(t);

                            this.colorChange.setHSL(.5 + zigzagTime, 1.0, .5)
                            coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b)
                            coulors.needsUpdate = true;

                            if ((px > (initX + 70)) || (px < (initX - 70)) || (py > (initY + 70) || (py < (initY - 70)))) {

                                this.colorChange.setHSL(.15, 1.0, .5)
                                coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b)
                                coulors.needsUpdate = true;

                            }

                        } else {

                            if (mouseDistance < this.data.area) {

                                if (i % 5 == 0) {

                                    const t = Math.atan2(dy, dx);
                                    px -= .03 * Math.cos(t);
                                    py -= .03 * Math.sin(t);

                                    this.colorChange.setHSL(.15, 1.0, .5)
                                    coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b)
                                    coulors.needsUpdate = true;

                                    size.array[i] = this.data.particleSize / 1.2;
                                    size.needsUpdate = true;

                                } else {

                                    const t = Math.atan2(dy, dx);
                                    px += f * Math.cos(t);
                                    py += f * Math.sin(t);

                                    pos.setXYZ(i, px, py, pz);
                                    pos.needsUpdate = true;

                                    size.array[i] = this.data.particleSize * 1.3;
                                    size.needsUpdate = true;
                                }

                                if ((px > (initX + 10)) || (px < (initX - 10)) || (py > (initY + 10) || (py < (initY - 10)))) {

                                    this.colorChange.setHSL(.15, 1.0, .5)
                                    coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b)
                                    coulors.needsUpdate = true;

                                    size.array[i] = this.data.particleSize / 1.8;
                                    size.needsUpdate = true;

                                }
                            }

                        }

                        px += (initX - px) * this.data.ease;
                        py += (initY - py) * this.data.ease;
                        pz += (initZ - pz) * this.data.ease;

                        pos.setXYZ(i, px, py, pz);
                        pos.needsUpdate = true;

                    }
                }
            }

            createText() {

                let thePoints = [];

                let shapes = this.font.generateShapes(this.data.text, this.data.textSize);
                let geometry = new THREE.ShapeGeometry(shapes);
                geometry.computeBoundingBox();

                const xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);
                const yMid = (geometry.boundingBox.max.y - geometry.boundingBox.min.y) / 2.85;

                geometry.center();

                let holeShapes = [];

                for (let q = 0; q < shapes.length; q++) {

                    let shape = shapes[q];

                    if (shape.holes && shape.holes.length > 0) {

                        for (let j = 0; j < shape.holes.length; j++) {

                            let hole = shape.holes[j];
                            holeShapes.push(hole);
                        }
                    }

                }
                shapes.push.apply(shapes, holeShapes);

                let colors = [];
                let sizes = [];

                for (let x = 0; x < shapes.length; x++) {

                    let shape = shapes[x];

                    const amountPoints = (shape.type == 'Path') ? this.data.amount / 2 : this.data.amount;

                    let points = shape.getSpacedPoints(amountPoints);

                    points.forEach((element, z) => {

                        const a = new THREE.Vector3(element.x, element.y, 0);
                        thePoints.push(a);
                        colors.push(this.colorChange.r, this.colorChange.g, this.colorChange.b);
                        sizes.push(1)

                    });
                }

                let geoParticles = new THREE.BufferGeometry().setFromPoints(thePoints);
                geoParticles.translate(xMid, yMid, 0);

                geoParticles.setAttribute('customColor', new THREE.Float32BufferAttribute(colors, 3));
                geoParticles.setAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));

                const material = new THREE.ShaderMaterial({

                    uniforms: {
                        color: { value: new THREE.Color(0xffffff) },
                        pointTexture: { value: this.particleImg }
                    },
                    vertexShader: document.getElementById('vertexshader').textContent,
                    fragmentShader: document.getElementById('fragmentshader').textContent,

                    blending: THREE.AdditiveBlending,
                    depthTest: false,
                    transparent: true,
                });

                this.particles = new THREE.Points(geoParticles, material);
                this.scene.add(this.particles);

                this.geometryCopy = new THREE.BufferGeometry();
                this.geometryCopy.copy(this.particles.geometry);



            }

            visibleHeightAtZDepth(depth, camera) {

                const cameraOffset = camera.position.z;
                if (depth < cameraOffset) depth -= cameraOffset;
                else depth += cameraOffset;

                const vFOV = camera.fov * Math.PI / 180;

                return 2 * Math.tan(vFOV / 2) * Math.abs(depth);
            }

            visibleWidthAtZDepth(depth, camera) {

                const height = this.visibleHeightAtZDepth(depth, camera);
                return height * camera.aspect;

            }

            distance(x1, y1, x2, y2) {

                return Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2));
            }
        }

    </script>

</body>

</html>